{
    "docs": [
        {
            "location": "/", 
            "text": "Welcome to CS12 SI!\n\n\nThis is where all of the labs will be posted.\n\n\nWhat is SI?\n\n\nSupplemental Instruction is a series of weekly review sessions for students\ntaking historically difficult courses. It offers students the chance to\ncollaborate, discuss challenging concepts, and study for exams.\n\n\nWhat isn\u2019t SI?\n\n\nSupplemental Instruction is not a lecture. SI Leaders are not there to teach you new material but to lead you in reviewing the material covered in lecture\nand to help guide you in understanding the subject.\n\n\nWho should go?\n\n\nAnyone who has the time to spare; whether you have been programming on the\nside for a number of years or if your only experience with computers is\nwriting essays and checking Facebook, I promise you I will be able to help you\nlearn something new that will help your perform better in the course.\n\n\nHowever, if you are having trouble in the class or think you might run into\ntrouble, you should definitely attend. CS 10 has a high dropout rate, along\nwith a high failure rate, so if you are running into trouble, let me help you.\nDo not be intimidated if you are trying to start coming later in the quarter\n(though try not to wait that long), I will help bring you up to speed.\n\n\nWith that in mind, I should mention that SI is required for learning community\nstudents. If you are not attending, you will be dropped from your learning\ncommunity.\n\n\nGuidelines:\n\n\n\n\nBe respectful - This includes silencing your cell phones\nand not using them during sessions.\n\n\nParticipate - You won\u2019t get very much out of SI if you\ndon\u2019t.\n\n\nNo food or drink besides water - This is a rule placed\nby the administration. I will enforce it.\n\n\nLate entry and early exit should be quiet - I realize\neveryone\u2019s schedules are different. However, please do not\nenter or leave in such a way that draws everyone\u2019s\nattention to you.\n\n\nSign in - There will usually be a working computer for\nyou to sign into when you arrive. Please use it to check in\n(even if you\u2019re not on time).", 
            "title": "Home"
        }, 
        {
            "location": "/#welcome-to-cs12-si", 
            "text": "This is where all of the labs will be posted.", 
            "title": "Welcome to CS12 SI!"
        }, 
        {
            "location": "/#what-is-si", 
            "text": "Supplemental Instruction is a series of weekly review sessions for students\ntaking historically difficult courses. It offers students the chance to\ncollaborate, discuss challenging concepts, and study for exams.", 
            "title": "What is SI?"
        }, 
        {
            "location": "/#what-isnt-si", 
            "text": "Supplemental Instruction is not a lecture. SI Leaders are not there to teach you new material but to lead you in reviewing the material covered in lecture\nand to help guide you in understanding the subject.", 
            "title": "What isn\u2019t SI?"
        }, 
        {
            "location": "/#who-should-go", 
            "text": "Anyone who has the time to spare; whether you have been programming on the\nside for a number of years or if your only experience with computers is\nwriting essays and checking Facebook, I promise you I will be able to help you\nlearn something new that will help your perform better in the course.  However, if you are having trouble in the class or think you might run into\ntrouble, you should definitely attend. CS 10 has a high dropout rate, along\nwith a high failure rate, so if you are running into trouble, let me help you.\nDo not be intimidated if you are trying to start coming later in the quarter\n(though try not to wait that long), I will help bring you up to speed.  With that in mind, I should mention that SI is required for learning community\nstudents. If you are not attending, you will be dropped from your learning\ncommunity.", 
            "title": "Who should go?"
        }, 
        {
            "location": "/#guidelines", 
            "text": "Be respectful - This includes silencing your cell phones\nand not using them during sessions.  Participate - You won\u2019t get very much out of SI if you\ndon\u2019t.  No food or drink besides water - This is a rule placed\nby the administration. I will enforce it.  Late entry and early exit should be quiet - I realize\neveryone\u2019s schedules are different. However, please do not\nenter or leave in such a way that draws everyone\u2019s\nattention to you.  Sign in - There will usually be a working computer for\nyou to sign into when you arrive. Please use it to check in\n(even if you\u2019re not on time).", 
            "title": "Guidelines:"
        }, 
        {
            "location": "/lab_week_03/", 
            "text": "Lab 3: Structs and Classes\n\n\nStructs\n\n\nStructs are a way to create new datatypes that are combinations of smaller datatypes.\n\n\nHere's how you would use them:\n\n\nstruct StructName {\n    Type1 field1;\n    Type2 field2;\n    // ...\n};  // \n-- Notice this semicolon\n\n\n\n\nAfter this point, there now exists a new type - a struct - called \nStructName\n, and it can be used like so:\n\n\nStructName myStruct;\nmyStruct.field1;     // expression of type Type1\nmyStruct.field2;     // expression of type Type2\n\n\n\n\nStructs define different fields.\nEach field gets its own type.\nWhen using the struct, each field is available through the dot operator.\n\n\nNow, you can use your new type like you would any other type.\n\n\n/* in containers */\nvector\nStructName\n v(20);        // a vector of StructName with a size of 20\n\n/* functions */\nvoid f1(StructName arg1);        // accepts StructName by value\nvoid f1(StructName\n arg1);       // accepts StructName by reference\nvoid f1(const StructName\n arg1); // accepts StructName by const reference\n\nStructName f2();                 // returns StructName", 
            "title": "Lab Week 3"
        }, 
        {
            "location": "/lab_week_03/#lab-3-structs-and-classes", 
            "text": "", 
            "title": "Lab 3: Structs and Classes"
        }, 
        {
            "location": "/lab_week_03/#structs", 
            "text": "Structs are a way to create new datatypes that are combinations of smaller datatypes.  Here's how you would use them:  struct StructName {\n    Type1 field1;\n    Type2 field2;\n    // ...\n};  //  -- Notice this semicolon  After this point, there now exists a new type - a struct - called  StructName , and it can be used like so:  StructName myStruct;\nmyStruct.field1;     // expression of type Type1\nmyStruct.field2;     // expression of type Type2  Structs define different fields.\nEach field gets its own type.\nWhen using the struct, each field is available through the dot operator.  Now, you can use your new type like you would any other type.  /* in containers */\nvector StructName  v(20);        // a vector of StructName with a size of 20\n\n/* functions */\nvoid f1(StructName arg1);        // accepts StructName by value\nvoid f1(StructName  arg1);       // accepts StructName by reference\nvoid f1(const StructName  arg1); // accepts StructName by const reference\n\nStructName f2();                 // returns StructName", 
            "title": "Structs"
        }
    ]
}